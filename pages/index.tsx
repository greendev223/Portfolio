import React from 'react';
import Head from 'next/head'
import * as THREE from "three";
import {OrbitControls} from "three/examples/jsm/controls/OrbitControls"
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

// import Image from 'next/image'
// import Link from 'next/link';

import Header from '../components/header/Header';
// import Footer from '../components/footer/Footer';

type Props = {  
}

type ContactState = {
}

class Home extends React.Component<Props, ContactState> { 
  // constructor(props:Props) {
  //   super(props)
  // }
  // state: ContactState = {};  
  
  componentDidMount(){        
    let container:any, clock:any;
    let camera:any, scene:any, renderer:any, controls:any;

    init();
    animate();

    async function init() {
      //=========== scene, camera, renderer ===========
      container = document.getElementById( 'canvas-container' );
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 12000 ); 
      camera.position.y=10
      camera.position.z=20
      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio( window.devicePixelRatio );
      renderer.setClearColor(0x000000);
      renderer.setSize( window.innerWidth, window.innerHeight );
      controls = new OrbitControls( camera, renderer.domElement );
      // controls.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' }
      // controls.maxPolarAngle = 0.9 * Math.PI / 2;
      controls.maxDistance = 400;
      controls.minDistance = 10;
      controls.autoRotate = true;
      controls.autoRotateSpeed = 0.5;
      controls.update();
      container.appendChild( renderer.domElement );
      window.addEventListener( 'resize', onWindowResize );
      //=========== lights ===========
      // const ambientLight = new THREE.AmbientLight( 0xcccccc, 0.4 );
      // scene.add( ambientLight );
      // const light = new THREE.PointLight( 0xffffff, 0.1, 100 );
      // light.position.set( 0, 50, 0 );
      // scene.add( light );      
      const light = new THREE.DirectionalLight( 0xaabbff, 0.3 );
      light.position.x = 0;
      light.position.y = 150;
      light.position.z = 0;
      scene.add( light );
      
      // clock = new THREE.Clock(); 

      const geometry = new THREE.BoxGeometry(1000, 1000, 1000);     
      
      const loadManager = new THREE.LoadingManager();
      const loader = new THREE.TextureLoader(loadManager);

      const materials = [
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/px.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/nx.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/py.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/ny.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/pz.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/nz.jpg')}),
      ];
      loadManager.onLoad = () => {
        const cube = new THREE.Mesh(geometry, materials);
        scene.add(cube);
      };
      const v4loader = new THREE.ObjectLoader();
      // const object1 = await v4loader.loadAsync( "assets/models/v4/scene.json" );
      // scene.add( object1 );
      v4loader.load(
        "assets/models/v4/scene.json",
        function ( obj ) {obj.scale.set(0.3,0.3,0.3); obj.position.set(0,-5,0);scene.add( obj );
        },
        function ( xhr ) {console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );},
        function ( err ) {console.error( 'An error happened' );}
      );

      // const object = v4loader.parse( a_json_object );
      // var object = v4loader.parse(a_json_object)
      // scene.add( object );      
      loadManager.onProgress = (urlOfLastItemLoaded, itemsLoaded, itemsTotal) => {
        const progress = itemsLoaded / itemsTotal;
        // progressBarElem.style.transform = `scaleX(${progress})`;
        console.log(progress)
      };

    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize( window.innerWidth, window.innerHeight );
    }

    function animate() {      
			controls.update();
      requestAnimationFrame( animate );
      render();      
    }

    function render() {
      // const delta = clock.getDelta();
      // if ( model !== undefined ) {
      //   model.rotation.z += delta * 0.5;
      // }
      renderer.render( scene, camera );
    }
  }


  render(){
    return (
      <>
        <Head>
          <title>My Portfolio</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.png" />
        </Head>
        
        <main className=''>
        
          <Header />
            <div>Landing Page</div>

          {/* <Footer/> */}
        </main>
        <div id='canvas-container' className='absolute w-full h-full top-0 left-0' style={{zIndex:'-100'}}></div>
      </>
    );
  }
}

export default Home;