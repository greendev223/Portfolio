import React from 'react';
import Head from 'next/head'
import * as THREE from "three";
import {OrbitControls} from "three/examples/jsm/controls/OrbitControls"
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

// import Image from 'next/image'
// import Link from 'next/link';

import Header from '../components/header/Header';
// import Footer from '../components/footer/Footer';

type Props = {  
}

type ContactState = {
}

class Home extends React.Component<Props, ContactState> { 
  // constructor(props:Props) {
  //   super(props)
  // }
  // state: ContactState = {};  
  
  componentDidMount(){        
    let container:any, clock:any;
    let camera:any, scene:any, renderer:any, model:any;

    init();
    animate();

    function init() {
      //=========== scene, camera, renderer ===========
      container = document.getElementById( 'canvas-container' );
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 3000 ); 
      camera.position.y=10
      camera.position.z=20
      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio( window.devicePixelRatio );
      renderer.setClearColor(0x000000);
      renderer.setSize( window.innerWidth, window.innerHeight );
      const controls = new OrbitControls( camera, renderer.domElement );
			controls.update();
			controls.enablePan = false;
			controls.enableDamping = true;
      container.appendChild( renderer.domElement );
      window.addEventListener( 'resize', onWindowResize );
      //=========== lights ===========
      const ambientLight = new THREE.AmbientLight( 0xcccccc, 0.4 );
      scene.add( ambientLight );
      const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.8 );
      directionalLight.position.set( 1, 1, 0 ).normalize();
      scene.add( directionalLight );
      
      // clock = new THREE.Clock();      
      const geometry1 = new THREE.BoxGeometry( 1, 1, 1 );
      const material1 = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
      const cube1 = new THREE.Mesh( geometry1, material1 );
      cube1.position.set(0,0,0)
      scene.add( cube1 );

      const geometry = new THREE.BoxGeometry(2000, 2000, 2000);     
      
      const loadManager = new THREE.LoadingManager();
      const loader = new THREE.TextureLoader(loadManager);

      const materials = [
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/px.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/nx.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/py.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/ny.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/pz.jpg')}),
        new THREE.MeshBasicMaterial({side: THREE.DoubleSide, map: loader.load('assets/img/landing-page/nz.jpg')}),
      ];
      loadManager.onLoad = () => {
        // loadingElem.style.display = 'none';
        const cube = new THREE.Mesh(geometry, materials);
        scene.add(cube);
        // cubes.push(cube);  // add to our list of cubes to rotate
      };
      
      loadManager.onProgress = (urlOfLastItemLoaded, itemsLoaded, itemsTotal) => {
        const progress = itemsLoaded / itemsTotal;
        // progressBarElem.style.transform = `scaleX(${progress})`;
        console.log(progress)
      };

    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize( window.innerWidth, window.innerHeight );
    }

    function animate() {
      requestAnimationFrame( animate );
      render();      
    }

    function render() {
      // const delta = clock.getDelta();
      // if ( model !== undefined ) {
      //   model.rotation.z += delta * 0.5;
      // }
      renderer.render( scene, camera );
    }
  }


  render(){
    return (
      <>
        <Head>
          <title>My Portfolio</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.png" />
        </Head>
        
        <main className=''>
        
          <Header />
            <div>Landing Page</div>

          {/* <Footer/> */}
        </main>
        <div id='canvas-container' className='absolute w-full h-full top-0 left-0' style={{zIndex:'-100'}}></div>
      </>
    );
  }
}

export default Home
